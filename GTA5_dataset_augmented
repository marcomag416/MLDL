import os
import pandas as pd
from PIL import Image
import numpy as np
import torch
from torch.utils.data import Dataset, DataLoader
from torchvision import transforms as T
from pytorchdl_gta5.labels import GTA5Labels_TaskCV2017
import albumentations as A
from albumentations.pytorch import ToTensorV2

if __name__ != '__main__':
    raise Exception("This script should not be imported; it should be run directly.")

# Setup device agnostic code
device = "cuda" if torch.cuda.is_available() else "cpu"

# Define the custom dataset class
class GTASegmentationDataset(Dataset):
    def __init__(self, csv_file, transform=None):
        self.data_frame = pd.read_csv(csv_file)
        self.transform = transform
        self.label_mapping = self._create_label_mapping()
        self.color_jitter = T.ColorJitter(brightness=0.2, contrast=0.2, saturation=0.2, hue=0.1)

    def __len__(self):
        return len(self.data_frame)

    def __getitem__(self, idx):
        if torch.is_tensor(idx):
            idx = idx.tolist()
    
        img_name = self.data_frame.iloc[idx, 0]
        mask_name = self.data_frame.iloc[idx, 1]
    
        image = Image.open(img_name).convert('RGB')
        mask = Image.open(mask_name).convert('RGB')
        
        # Apply color jitter directly to the image
        image = self.color_jitter(image)
        
        if self.transform:
            augmented = self.transform(image=np.array(image), mask=np.array(mask))
            image, mask = augmented['image'], augmented['mask']
            
        mask = self._map_mask(np.array(mask))
    
        # Convert mask to tensor without normalization
        mask = torch.from_numpy(mask).long()  # Ensure the mask is of type long for cross-entropy loss
    
        return image, mask

    def _create_label_mapping(self):
        label_mapping = {label.color: label.ID for label in GTA5Labels_TaskCV2017.list_}
        label_mapping[(0, 0, 0)] = 255  # Ensure unmapped colors go to 'unlabeled'
        return label_mapping
        
    def _map_mask(self, mask):
        new_mask = np.zeros((mask.shape[0], mask.shape[1]), dtype=np.uint8)
        for color, label_id in self.label_mapping.items():
            color_mask = np.all(mask == color, axis=-1)
            new_mask[color_mask] = label_id  # Use label_id instead of color
        return new_mask

# Define paths
csv_file = 'gta5_segmentation_dataset.csv'

# Define image transformations
transform = A.Compose([
    A.Resize(512, 1024),
    A.Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225)),
    A.RandomRotate90(),
    A.HorizontalFlip(p=0.2),
    A.VerticalFlip(p=0.2),
    A.RandomResizedCrop(height=512, width=1024, scale=(0.8, 1.0)),
    ToTensorV2()
])

# Create the dataset and dataloader
train_dataset = GTASegmentationDataset(csv_file=csv_file, transform=transform)
train_dataloader = DataLoader(train_dataset, batch_size=8, shuffle=True)

-------------------------------------------------------------------
# use the next code to modify the gta dataset for 3a

"""
import os
import pandas as pd
from PIL import Image
import numpy as np
import torch
from torch.utils.data import Dataset, DataLoader
from torchvision import transforms
from pytorchdl_gta5.labels import GTA5Labels_TaskCV2017
import albumentations as A
from albumentations.pytorch import ToTensorV2

if __name__ != '__main__':
    raise Exception("This script should not be imported; it should be run directly.")

# Setup device agnostic code
device = "cuda" if torch.cuda.is_available() else "cpu"

# Define the custom dataset class
class GTASegmentationDataset(Dataset):
    def __init__(self, csv_file, transform=None):
        self.data_frame = pd.read_csv(csv_file)
        self.transform = transform
        self.label_mapping = self._create_label_mapping()

    def __len__(self):
        return len(self.data_frame)

    def __getitem__(self, idx):
        if torch.is_tensor(idx):
            idx = idx.tolist()
    
        img_name = self.data_frame.iloc[idx, 0]
        mask_name = self.data_frame.iloc[idx, 1]
    
        image = Image.open(img_name).convert('RGB')
        mask = Image.open(mask_name).convert('RGB')
        
        if self.transform:
            augmented = self.transform(image=np.array(image), mask=np.array(mask))
            image, mask = augmented['image'], augmented['mask']
            
        mask = self._map_mask(np.array(mask))
    
        # Convert mask to tensor without normalization
        mask = torch.from_numpy(mask).long()  # Ensure the mask is of type long for cross-entropy loss
    
        return image, mask

    def _create_label_mapping(self):
        label_mapping = {label.color: label.ID for label in GTA5Labels_TaskCV2017.list_}
        label_mapping[(0, 0, 0)] = 255  # Ensure unmapped colors go to 'unlabeled'
        return label_mapping
        
    def _map_mask(self, mask):
        new_mask = np.zeros((mask.shape[0], mask.shape[1]), dtype=np.uint8)
        for color, label_id in self.label_mapping.items():
            color_mask = np.all(mask == color, axis=-1)
            new_mask[color_mask] = label_id  # Use label_id instead of color
        return new_mask

# Define paths
csv_file = 'gta5_segmentation_dataset.csv'

# Define image transformations
transform = A.Compose([
    A.Resize(512, 1024),
    A.Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225)),
    ToTensorV2()
])

# Create the dataset and dataloader
train_dataset = GTASegmentationDataset(csv_file=csv_file, transform=transform)
train_dataloader = DataLoader(train_dataset, batch_size=2, shuffle=True)
"""
